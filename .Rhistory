## ui.R ##
install.packages(shinythemes)
library(shinythemes)
## ui.R ##
install.packages(shinythemes)
library(shinythemes)
#ui page for the shiny app
library(dplyr)
library(shiny)
library(plotly)
install.packages("dplyr")
library(dplyr)
install.packages("shiny")
library(shiny)
install.packages("plotly")
library(plotly)
install.packages("shinythemes")
library(shinythemes)
runApp('Sophomore Year/INFO 498/INFO-498-Final-Project')
runApp('Sophomore Year/INFO 498/INFO-498-Final-Project')
library(shiny)
#install.packages("shinythemes")
library(shinythemes)
runApp('NYPANSAnalysis')
# This is the server logic of our Shiny web application.
library(dplyr)
library(shiny)
library(plotly)
library(rsconnect)
source('BuildGraph.R')
### Sports Data Server Logic
shinyServer(function(input,output) {
dataset <- read.csv("data/active.csv")
output$bar <- renderPlotly({
bar()
})
bar <- reactive({
buildPlot(dataset,input$slider1, input$question)
})
})
runApp('NYPANSAnalysis')
install.packages("sas7bdat")
library(sas7bdat)
library(dplyr)
library (plotly)
data <- read.sas7bdat("data/nypans2010.sas7bdat", debug=FALSE)
active <- data %>% select(e_q9, e_q57, e_q58, e_q59, e_q60, e_q61)
active[is.na(active)] <- 0
active$enjoy <- active$e_q57
active$fun <- active$e_q58
active$energy <- active$e_q59
active$BodyIsGood <- active$e_q60
active$success <- active$e_q61
active$e_q57 <- NULL
active$e_q58 <- NULL
active$e_q59 <- NULL
active$e_q60 <- NULL
active$e_q61 <- NULL
active$e_q9 <- as.numeric(active$e_q9)
active$e_q9 <- active$e_q9 - 1
write.csv(active, "data/active.csv")
test <- active %>% filter(as.numeric(enjoy) > 1) %>% group_by(enjoy) %>% summarise(n())
buildPlot <- function(dataset, slider, question){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",question)
print("1")
newdata <- active %>% filter(e_q9 == slider) %>% filter(as.numeric(question) > 1) %>% group_by(question) %>% summarise(n())
print(newdata)
newdata$surveyed <- newdata$`n()`
# Create a scatter plot of selected stat
p <- plot_ly(
newdata,
x = eval(parse(text = x.equation)),
y = ~surveyed,
type = 'bar'
)
return (p)
}
buildPlot(2, active$enjoy)
test <- active %>% filter(e_q9 == 2) %>%  filter(as.numeric(enjoy) > 1) %>% group_by(enjoy) %>% summarise(n())
test$surveyed <- test$`n()`
p <- plot_ly(
test,
x = ~enjoy,
y = ~surveyed,
type = 'bar'
)
p
install.packages("rsconnect")
library(rsconnect)
runApp('NYPANSAnalysis')
runApp('NYPANSAnalysis')
runApp('Sophomore Year/INFO 498/INFO-498-Final-Project')
